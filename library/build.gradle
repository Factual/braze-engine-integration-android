apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'InvalidPackage'
    }
}

repositories {
    mavenCentral()
}

ext {
    brazeVersion = "[3.0.0,)"
    engineVersion = "[13.0.0,)"
    utilsVersion = "[2.0.0,)"
    artifact = "braze-engine"
    libraryVersion = "3.0.0"
}

dependencies {
    implementation 'androidx.annotation:annotation:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    api "com.factual:integration-utils:${utilsVersion}"
    api "com.factual:engine-sdk:${engineVersion}"
    api "com.appboy:android-sdk-base:${brazeVersion}"
}

// local repo
install {
  repositories {
    mavenInstaller {
      pom {
        project {
          groupId 'com.factual.engine'
          artifactId artifact
          version libraryVersion

          name 'BrazeEngine'
          description 'Factual Engine and Braze SDK Integration'
          url 'https://github.com/Factual/braze-engine-integration-android'
          licenses {
            license {
              name 'The MIT License (MIT)'
              url 'http://opensource.org/licenses/MIT'
              distribution 'repo'
            }
          }
          developers {
            developer {
              id 'factual'
              name 'Factual, Inc.'
            }
          }
        }
      }
    }
  }
}

uploadArchives {
  repositories {
    def deployRepoUrl = System.getenv('DEPLOY_REPO_URL') ?: ''
    def deployRepoUser = System.getenv('DEPLOY_REPO_USER') ?: ''
    def deployRepoPass = System.getenv('DEPLOY_REPO_PASS') ?: ''

    mavenDeployer {
      repository(url: deployRepoUrl) {
        authentication(userName: deployRepoUser, password: deployRepoPass)
      }
      pom = install.repositories.mavenInstaller.pom
    }
  }
}
